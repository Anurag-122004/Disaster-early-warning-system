{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\91639\\\\disaster system\\\\disaster-frontend\\\\src\\\\components\\\\RealTimeUpdates.js\";\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RealTimeUpdates = () => {\n  // const [disasters, setDisasters] = useState({}); \n\n  // useEffect(() => {\n  //     const socket = new WebSocket('ws://localhost:5000');\n\n  //     socket.onopen = () => {\n  //         console.log('WebSocket connection established');\n  //     };\n\n  //     socket.onmessage = (event) => {\n  //         try {\n  //             const data = JSON.parse(event.data);\n\n  //             // Validate data structure\n  //             if (data.type && data.location && data.severity) {\n  //                 setDisasters((prevDisasters) => ({\n  //                     ...prevDisasters,\n  //                     [data.location]: data, \n  //                 }));\n  //             } else {\n  //                 console.error('Invalid data format:', data);\n  //             }\n  //         } catch (error) {\n  //             console.error('Error parsing WebSocket message:', error);\n  //             console.log('Raw data:', event.data);\n  //         }\n  //     };\n\n  //     socket.onclose = () => {\n  //         console.log('WebSocket connection closed');\n  //     };\n\n  //     socket.onerror = (error) => {\n  //         console.error('WebSocket error:', error);\n  //     };\n\n  //     return () => {\n  //         if (socket.readyState === WebSocket.OPEN || socket.readyState === WebSocket.CONNECTING) {\n  //             socket.close();\n  //         }\n  //     };\n  // }, []);\n\n  // const disasterList = Object.values(disasters); \n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Real-Time Disaster Updates\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: disasterList.map((disaster, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [disaster.type, \" - \", disaster.location, \" - Severity: \", disaster.severity]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n};\n_c = RealTimeUpdates;\nexport default RealTimeUpdates;\nvar _c;\n$RefreshReg$(_c, \"RealTimeUpdates\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","RealTimeUpdates","children","fileName","_jsxFileName","lineNumber","columnNumber","disasterList","map","disaster","index","type","location","severity","_c","$RefreshReg$"],"sources":["C:/Users/91639/disaster system/disaster-frontend/src/components/RealTimeUpdates.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst RealTimeUpdates = () => {\r\n    // const [disasters, setDisasters] = useState({}); \r\n\r\n    // useEffect(() => {\r\n    //     const socket = new WebSocket('ws://localhost:5000');\r\n\r\n    //     socket.onopen = () => {\r\n    //         console.log('WebSocket connection established');\r\n    //     };\r\n\r\n    //     socket.onmessage = (event) => {\r\n    //         try {\r\n    //             const data = JSON.parse(event.data);\r\n\r\n    //             // Validate data structure\r\n    //             if (data.type && data.location && data.severity) {\r\n    //                 setDisasters((prevDisasters) => ({\r\n    //                     ...prevDisasters,\r\n    //                     [data.location]: data, \r\n    //                 }));\r\n    //             } else {\r\n    //                 console.error('Invalid data format:', data);\r\n    //             }\r\n    //         } catch (error) {\r\n    //             console.error('Error parsing WebSocket message:', error);\r\n    //             console.log('Raw data:', event.data);\r\n    //         }\r\n    //     };\r\n\r\n    //     socket.onclose = () => {\r\n    //         console.log('WebSocket connection closed');\r\n    //     };\r\n\r\n    //     socket.onerror = (error) => {\r\n    //         console.error('WebSocket error:', error);\r\n    //     };\r\n\r\n    \r\n    //     return () => {\r\n    //         if (socket.readyState === WebSocket.OPEN || socket.readyState === WebSocket.CONNECTING) {\r\n    //             socket.close();\r\n    //         }\r\n    //     };\r\n    // }, []);\r\n\r\n    // const disasterList = Object.values(disasters); \r\n\r\n    return (\r\n        <div>\r\n            <h2>Real-Time Disaster Updates</h2>\r\n            <ul>\r\n                {disasterList.map((disaster, index) => (\r\n                    <li key={index}>\r\n                        {disaster.type} - {disaster.location} - Severity: {disaster.severity}\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default RealTimeUpdates;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAC1B;;EAEA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;;EAGA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA,oBACID,OAAA;IAAAE,QAAA,gBACIF,OAAA;MAAAE,QAAA,EAAI;IAA0B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACnCN,OAAA;MAAAE,QAAA,EACKK,YAAY,CAACC,GAAG,CAAC,CAACC,QAAQ,EAAEC,KAAK,kBAC9BV,OAAA;QAAAE,QAAA,GACKO,QAAQ,CAACE,IAAI,EAAC,KAAG,EAACF,QAAQ,CAACG,QAAQ,EAAC,eAAa,EAACH,QAAQ,CAACI,QAAQ;MAAA,GAD/DH,KAAK;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEV,CACP;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEd,CAAC;AAACQ,EAAA,GA3DIb,eAAe;AA6DrB,eAAeA,eAAe;AAAC,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}